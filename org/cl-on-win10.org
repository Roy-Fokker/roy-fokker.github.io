#+SETUPFILE: header.org
#+SUBTITLE: Setting up Common Lisp on Windows 7/10 64bit
#+OPTIONS: H:1 num:nil

* Why?
  Below is information, I had difficulty in finding/figuring out. As I started to on track to learn Common Lisp. 
  All of what I've learned in setting up a Common Lisp development environment on MS Windows is condensed below.

* Tools to Download
  Versions used were latest available at time of writing. Aim to get the latest releases of these.
  - [[http://ftp.gnu.org/gnu/emacs/windows/emacs-26/emacs-26.1-x86_64.zip][Emacs]]: version 26.3
  - [[http://www.sbcl.org][SBCL]]: version 2.0.4
  - [[https://github.com/roswell/roswell/releases][Roswell]]: version 20.04.14.105
  - [[https://spacemacs.org][Spacemacs]]: using =develop= branch.

* The Setup
  *Note:* Destination directory doesn't matter. Paths below are done to keep things together for my own sanity.
  It could be ~C:\BhelaBhela~ or whichever path one is comfortable with. 
  Only restriction seems to be spaces in directory name, in my experiments, roswell is unhappy with spaces in directory names.

** SBCL by itself
   Simply installed via installer. Only configuration that had to be done was to set =Environment Variable=.
   - SBCL was installed to ~E:\Lisp\SBCL\~
   - Add new =Environment Variable= called =SBCL_HOME= and set it to ~install directory~ of SBCL.
   - Add ~SBCL install directory~ to =PATH= variable.

** SBCL via  Roswell
   - Extract =roswell= from zip file to ~E:\Lisp\Roswell~.
   - Add ~Roswell install directory~ to =PATH=.
   - Open Command Prompt and execute
     #+begin_src shell
       ros run
     #+end_src
     This will start roswell, and it will automatically download latest windows version of SBCL.
     It will put SBCL into ~%UserProfile%\.roswell~.

** Quicklisp
   - Download ~Quicklisp.lisp~ from [[https://beta.quicklisp.org/quicklisp.lisp]].
     I've downloaded it to ~E:\Lisp\~. Command below was executed from same.
     #+begin_src shell
       curl -O https://beta.quicklisp.org/quicklisp.lisp
     #+end_src
   - Start SBCL, ~sbcl~ or ~ros run~, depending on what you used.
   - In the repl type, 
     #+begin_src elisp
       (load quicklisp.lisp)
       (quicklisp-quickstart:install)
       (ql:add-to-init-file)
     #+end_src
   - ~quicklisp-quickstart:install~ will download and install files into ~%UserProfile%\quicklisp~ directory.
   - ~ql:add-to-init-file~ will create ~.sbclrc~ file such that quicklisp is loaded when repl is started.

** Emacs
   - Extract =Emacs= into ~E:\emacs\~.
   - Emacs expects to find ~init.el~ file in ~%APPDATA%\.emacs.d~ directory. Manually create this file.
*** If not using =Spacemacs=
    I started out using =spacemacs= but have now switched over to using emacs with my own config.
   - Setup Packages package by adding following lines to ~init.el~
     #+begin_src elisp
       ;; ------------------------------------------------------------------
       ;; Configure Package Archives
       (require 'package) ; package management

       ;; Don't load any packages by default
       (setq package-enable-at-startup nil)

       ;; Where to look for packages
       (add-to-list 'package-archives '("org"   . "http://orgmode.org/elpa/") t)
       (add-to-list 'package-archives '("elpa"  . "http://elpa.gnu.org/packages/") t)
       (add-to-list 'package-archives '("melpa" . "http://melpa.org/packages/") t)

       (package-initialize) ;; initialize package.el

       ;; install use-package if it's not present
       (unless (package-installed-p 'use-package)
	 (package-refresh-contents)
	 (package-install 'use-package))
     #+end_src
   - I am using =use-package= to help manage the packages in emacs.
     It has pretty good [[https://jwiegley.github.io/use-package/][documentation]] on how to use it. So I won't repeat the steps here.
     Alternatively, it is possible to use built-in emacs package manager.
     Which can be started by typing ~Alt+x~ then ~package-list-packages~.
   - Below are the packages I have installed.
     Full configuration can be viewed at [[https://github.com/Roy-Fokker/dot-files/blob/master/emacs-config.org][Emacs-Config]]
     - rainbow-delimiters
     - yasnippet
     - yasnippet-snippet
     - common-lisp-snippets
     - company
     - company-quickhelp
     - flycheck
     - paredit
     - slime
     - slime-company
   - Tell emacs how to start slime, in the ~init.el~
     - It not using Roswell
       #+begin_src elisp
         (setq inferior-lisp-program "sbcl")
       #+end_src
     - If using Roswell 
       #+begin_src elisp
         (setq inferior-lisp-program "ros -Q run")
       #+end_src

*** If using =Spacemacs=
   - Clone as per [[https://spacemacs.org][spacemacs]] instructions.
   - Copy cloned ~.emacs.d~ directory to your ~%APPDATA%~ folder.
   - Open emacs.
     This will trigger spacemacs to download and do some basic setup.
     It will ask you questions during this process. I've agreed to defaults.
   - Open your ~.spacemacs~ file, by pressing =Space f e d=.
   - Scroll down to till you see =dotspacemacs-configuration-layers=
   - Press =o= besides =emacs-lisp= under =dotspacemacs-configuration-layers=
   - Type in =common-lisp=
   - Scroll further down till you find =dotspacemacs/user-config()=
   - Type in =(setq inferior-lisp-program "ros -Q run")= before the corresponding bracket to =defun dotspacemacs/user-config()=
   - Save by pressing =Escape= then =:w=
   - Restart Emacs by pressing =Space q r=
     This will make =spacemacs= install the common lisp layer

* Running REPL
  Start Emacs and execute Slime package via following `Alt+x` followed by `slime`

* Screenshot
  [[file:images/emacs_lisp_screenshot.png]]

* Alternatives
  Listing these 1st incase you don't want to go through the hassle of setting up Emacs and Roswell
- [[https://portacle.github.io/][Portacle]]:- Does not require installation of any of below. It's a self contained zip. 
  Bit of duplication of tools if you already have Git or Emacs installed.
- [[https://www.sublimetext.com/3][Sublime Text 3]]:- You'll need to install Roswell or SBCL
  - Packages
    - SublimeREPL
    - Paredit
    - BracketHighlighter
  - Add configuration for =Roswell=, if using =Roswell=, as follows 
    - Files are in ~%APPDATA%\Roaming\Sublime Text 3\Packages\SublimeREPL\config\CommonLisp\~
    - Edit ~Main.sublime-menu~ by adding following on Line 15 after ~"children":{{{BO}}}~
      #+begin_src js
	{
	    "command": "repl_open",
	    "caption": "Roswell",
	    "id": "repl_roswell",
	    "mnemonic": "R",
	    "args": {
		"type": "subprocess",
		"encoding": "utf8",
		"external_id": "lisp",
		"cmd": ["ros", "run"],
		"soft_quit": "\n(quit)\n",
		"cwd": "$folder",
		"cmd_postfix": "\n",
		"syntax": "Packages/Lisp/Lisp.tmLanguage"
	    }
	},
      #+end_src
    - Edit ~Default.sublime-commands~ by adding following on Line 2 after ~{{{BO}}}~
      #+begin_src js
	{ 
	    "caption": "SublimeREPL: Roswell",
	    "command": "run_existing_window_command", 
	    "args":
	    {
		"id": "repl_roswell",
		"file": "config/CommonLisp/Main.sublime-menu"
	    }
	},
     #+end_src
- [[https://code.visualstudio.com/][VSCode]]:- Again will need either Roswell or SBCL installed
  - Extensions
    - Lisp syntax highlight
    - Rainbow Brackets 2
    - SendToREPL: There are several REPL extensions for VSCode, but I didn't like any of them. 
      This one comes close, to Emacs like experience
  - Usage: Open VSCode Terminal and start Lisp Repl from within VSCode
